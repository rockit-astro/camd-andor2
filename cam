#!/usr/bin/env python3.4
#
# This file is part of camd.
#
# camd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# camd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with camd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for managing one of the cameras"""

# pylint: disable=invalid-name
# pylint: disable=broad-except

import os
import sys
import time
import Pyro4
from warwick.observatory.common import daemons

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

DAEMONS = {
    'blue': daemons.onemetre_blue_camera,
    'red': daemons.onemetre_red_camera
}

FMT_GREEN = '\033[92m'
FMT_RED = '\033[91m'
FMT_BOLD = '\033[1m'
FMT_CLEAR = '\033[0m'

# This should be kept in sync with the class in camd
STATUS_CODES = {
    # General error codes
    1: 'error: command failed',
    2: 'error: another command is already running',
    3: 'error: command not accepted from this IP',
    5: 'error: camera hardware not found',

    # Command-specific codes
    10: 'error: camera has not been initialized',
    11: 'error: camera is not idle',
    14: 'error: camera has already been initialized',
    15: 'error: camera is not acquiring',

    20: 'error: requested temperature is outside the supported limits',

    # Readout geometry
    30: 'error: binning does not evenly divide readout window',
    31: 'error: window size is not compatible with the current binning',
    32: 'error: window extends outside the bounds of the ccd',

    40: 'error: invalid gain',
    41: 'error: invalid shift speed',

    # cam specific codes
    -100: 'error: terminated by user',
    -101: 'error: unable to communicate with camera daemon',
}

CAMERA_STATE_DESCRIPTIONS = {
    0: '\033[1m\033[91mOFFLINE\033[0m',
    1: '\033[1m\033[91mINITIALIZING\033[0m',
    2: '\033[1mIDLE\033[0m',
    3: '\033[1m\033[92mEXPOSING\033[0m',
    4: '\033[1m\033[93mREADING\033[0m',
    5: '\033[1m\033[91mABORTING\033[0m'
}

GAIN_DESCRIPTIONS = {
    0: '\033[1mHIGH\033[0m',
    1: '\033[1mMEDIUM\033[0m',
    2: '\033[1mLOW\033[0m',
}

def run_command(daemon, command, args):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command(daemon, args)
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
        ret = stop(daemon, args)

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret in STATUS_CODES:
        print(STATUS_CODES[ret])
    elif ret != -1 and ret != 0:
        print('Returned unknown status code: {0}'.format(ret))
    return ret

def status(daemon, _):
    """Reports the current camera status"""
    with daemon.connect() as camd:
        data = camd.report_status()

    state_desc = '\033[1m\033[93mUNKNOWN\033[0m'
    if data['state'] in CAMERA_STATE_DESCRIPTIONS:
        state_desc = CAMERA_STATE_DESCRIPTIONS[data['state']]

    if data['state'] == 3:
        progress = '{:.1f} / {:.1f}s'.format(data['exposure_progress'], data['exposure_time'])
        state_desc += ' (' + FMT_BOLD + progress + FMT_CLEAR + ')'

    # Camera is disabled
    print('   Camera is {}'.format(state_desc))
    if data['state'] == 0:
        return 0

    if data['state'] > 2:
        if data['sequence_frame_limit'] > 0:
            print('   Acquiring frame ' + FMT_BOLD + str(data['sequence_frame_count'] + 1) + \
                  ' / ' + str(data['sequence_frame_limit']) + FMT_CLEAR)
        else:
            print('   Acquiring ' + FMT_BOLD + 'UNTIL STOPPED' + FMT_CLEAR)

    temperature_status = ''
    temperature_fmt = FMT_BOLD + FMT_RED
    if data['temperature_locked']:
        temperature_status = FMT_BOLD + FMT_GREEN + 'LOCKED' + FMT_CLEAR
        temperature_fmt = FMT_BOLD + FMT_GREEN
    elif not data['cooler_enabled']:
        temperature_status = FMT_BOLD + FMT_RED + 'COOLING DISABLED' + FMT_CLEAR
        temperature_fmt = FMT_BOLD
    else:
        temperature_status = FMT_BOLD + 'LOCKING ON {:.0f}\u00B0C'.format(
            data['target_temperature']) + FMT_CLEAR

    print('   Temperature is ' + temperature_fmt + '{:.0f}'.format(data['temperature']) + \
          '\u00B0C' + FMT_CLEAR + ' (' + temperature_status + ')')

    shutter_mode = FMT_GREEN + 'AUTO' if data['shutter_enabled'] else FMT_RED + 'DARK'
    print('   Shutter mode is ' + FMT_BOLD + shutter_mode + FMT_CLEAR)
    print('   Pre-amp gain is ' + GAIN_DESCRIPTIONS[data['gain_index']] + FMT_CLEAR + ' (' + \
        FMT_BOLD + '{} e/ADU'.format(data['gain_factor']) + FMT_CLEAR + ')')
    print('   Readout speed is ' + FMT_BOLD + '{:.2f} MHz'.format(
        data['horizontal_shift_speed_mhz']) + FMT_CLEAR)
    print('   Readout window is {4}({0}, {1}, {2}, {3}) px{5}'.format(
        data['geometry_x'], data['geometry_y'], data['geometry_width'], data['geometry_height'],
        FMT_BOLD, FMT_CLEAR))
    print('   Readout binning is {2}{0} x {1} px{3}'.format(
        data['geometry_bin_x'], data['geometry_bin_y'], FMT_BOLD, FMT_CLEAR))
    print('   Exposure time is ' + FMT_BOLD + '{:.2f} s'.format(data['exposure_time']) + FMT_CLEAR)

    return 0

def set_temperature(daemon, args):
    """Set the camera temperature"""
    if len(args) == 1:
        temp = int(args[0])
        with daemon.connect() as camd:
            return camd.set_target_temperature(temp, True)
    print('usage: {} [blue|red] temperature <degrees>'.format(SCRIPT_NAME))
    return -1

def stop_cooler(daemon, _):
    """Turns off active cooling"""
    with daemon.connect() as camd:
        return camd.enable_cooler(False)

def set_exposure(daemon, args):
    """Set the camera exposure time"""
    if len(args) == 1:
        exposure = float(args[0])
        with daemon.connect() as camd:
            return camd.set_exposure(exposure)
    print('usage: {} [blue|red] exposure <seconds>'.format(SCRIPT_NAME))
    return -1

def set_gain(daemon, args):
    """Set the camera gain"""
    if len(args) == 1 and (args[0] == 'high' or args[0] == 'medium' or args[0] == 'low'):
        index = 0 if args[0] == 'high' else 1 if args[0] == 'medium' else 2
        with daemon.connect() as camd:
            return camd.set_gain(index)
    print('usage: {} [blue|red] gain [high|medium|low]'.format(SCRIPT_NAME))
    return -1

def set_horizontal_shift_speed(daemon, args):
    """Set the readout / horizontal shift speed"""
    options = ['a', 'b', 'c', 'd']
    if len(args) == 1 and args[0] in options:
        index = options.index(args[0])
        with daemon.connect() as camd:
            return camd.set_horizontal_shift(index)
    print('usage: {} [blue|red] readout [a|b|c|d]'.format(SCRIPT_NAME))
    return -1

def set_shutter(daemon, args):
    """Set the camera shutter mode"""
    if len(args) == 1 and (args[0] == 'auto' or args[0] == 'dark'):
        enabled = args[0] == 'auto'
        with daemon.connect() as camd:
            return camd.set_shutter(enabled)
    print('usage: {} [blue|red] shutter [auto|dark]'.format(SCRIPT_NAME))
    return -1

def set_binning(daemon, args):
    """Set the camera binning"""
    if len(args) == 1:
        # Assume square pixels
        binning = int(args[0])
        with daemon.connect() as camd:
            return camd.set_binning(binning, binning)
    print('usage: {} [blue|red] bin <pixel size>'.format(SCRIPT_NAME))
    return -1

def set_window(daemon, args):
    """Set the camera readout window"""
    if len(args) == 4:
        x = int(args[0])
        y = int(args[1])
        width = int(args[2])
        height = int(args[3])
        with daemon.connect() as camd:
            return camd.set_window(x, y, width, height)
    print('usage: {} [blue|red] window <x> <y> <width> <height>'.format(SCRIPT_NAME))
    return -1

def start(daemon, args):
    """Starts an exposure sequence"""
    if len(args) == 1:
        try:
            count = 0 if args[0] == 'continuous' else int(args[0])
            if args[0] == 'continuous' or count > 0:
                with daemon.connect() as camd:
                    return camd.start_sequence(count)
        except Exception:
            print('error: invalid exposure count:', args[0])
            return -1
    print('usage: {} [blue|red] start (continuous|<count>)'.format(SCRIPT_NAME))
    return -1

def stop(daemon, _):
    """Stops any active camera exposures"""
    with daemon.connect() as camd:
        return camd.stop_sequence()

def initialize(daemon, _):
    """Enables the camera driver"""
    # Initialization can take more than 5 sec, so bump timeout to 10.
    with daemon.connect(10) as camd:
        return camd.initialize()

def shutdown(daemon, _):
    """Disables the camera drivers"""
    with daemon.connect() as camd:
        return camd.shutdown()

def reboot(daemon, _):
    """Reboots the camera driver"""
    shutdown(daemon, _)
    time.sleep(5)
    return initialize(daemon, _)

def print_usage():
    """Prints the utility help"""
    print('usage: {} [blue|red] <command> [<args>]'.format(SCRIPT_NAME))
    print()
    print('general commands:')
    print('   status       print a human-readable summary of the camera status')
    print('   exposure     set exposure time in seconds')
    print('   shutter      set shutter mode')
    print('   gain         set gain mode')
    print('   readout      set readout speed')
    print('   bin          set readout binning')
    print('   window       set readout window')
    print('   start        start an exposure sequence')
    print()
    print('engineering commands:')
    print('   init         initialize the camera driver')
    print('   temperature  set target temperature and enable cooling')
    print('   cooleroff    disable cooling')
    print('   kill         disconnect from camera driver')
    print('   reboot       kill and reinitialize the camera driver')
    print()

    return 0

if __name__ == '__main__':
    if len(sys.argv) < 3:
        sys.exit(print_usage())

    commands = {
        'cooleroff': stop_cooler,
        'temperature': set_temperature,
        'exposure': set_exposure,
        'shutter': set_shutter,
        'gain': set_gain,
        'readout': set_horizontal_shift_speed,
        'bin': set_binning,
        'window': set_window,
        'status': status,
        'start': start,
        'stop': stop,
        'init': initialize,
        'kill': shutdown,
        'reboot': reboot
    }

    if sys.argv[1] not in DAEMONS or sys.argv[2] not in commands:
        sys.exit(print_usage())

    sys.exit(run_command(DAEMONS[sys.argv[1]], commands[sys.argv[2]], sys.argv[3:]))
