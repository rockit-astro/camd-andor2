#!/usr/bin/env python3.6
#
# This file is part of camd.
#
# camd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# camd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with camd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for managing one of the cameras"""

import glob
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.camera.andor import Config, CommandStatus, CameraStatus, CameraGain

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(config_paths, camera_id, command, args):
    """Prints the message associated with a status code and returns the code"""
    config = Config(config_paths[camera_id])
    try:
        ret = command(config, sorted(config_paths.keys()), args)
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
        ret = stop(config, args)

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes
    if ret not in [-1, 0]:
        print(CommandStatus.message(ret))

    return ret


def status(config, *_):
    """Reports the current camera status"""
    with config.daemon.connect() as camd:
        data = camd.report_status()

    state_desc = CameraStatus.label(data['state'])
    if data['state'] == CameraStatus.Acquiring:
        progress = '{:.1f} / {:.1f}s'.format(data['exposure_progress'], data['exposure_time'])
        state_desc += ' (' + TFmt.Bold + progress + TFmt.Clear + ')'
    elif data['state'] == CameraStatus.Waiting:
        progress = '{:.1f} / {:.1f}s'.format(data['delay_progress'], data['delay_time'])
        state_desc += ' (' + TFmt.Bold + progress + TFmt.Clear + ')'

    # Camera is disabled
    print('   Camera is {}'.format(state_desc))
    if data['state'] == CameraStatus.Disabled:
        return 0

    if data['state'] > CameraStatus.Idle:
        if data['sequence_frame_limit'] > 0:
            print('   Acquiring frame ' + TFmt.Bold + str(data['sequence_frame_count'] + 1) + \
                  ' / ' + str(data['sequence_frame_limit']) + TFmt.Clear)
        else:
            print('   Acquiring ' + TFmt.Bold + 'UNTIL STOPPED' + TFmt.Clear)

    temperature_fmt = TFmt.Bold + TFmt.Red
    if data['temperature_locked']:
        temperature_status = TFmt.Bold + TFmt.Green + 'LOCKED' + TFmt.Clear
        temperature_fmt = TFmt.Bold + TFmt.Green
    elif not data['cooler_enabled']:
        temperature_status = TFmt.Bold + TFmt.Red + 'COOLING DISABLED' + TFmt.Clear
        temperature_fmt = TFmt.Bold
    else:
        temperature_status = TFmt.Bold + 'LOCKING ON {:.0f}\u00B0C'.format(
            data['target_temperature']) + TFmt.Clear

    print('   Temperature is ' + temperature_fmt + '{:.0f}'.format(data['temperature']) + \
          '\u00B0C' + TFmt.Clear + ' (' + temperature_status + ')')

    shutter_mode = TFmt.Green + 'AUTO' if data['shutter_enabled'] else TFmt.Red + 'DARK'
    print('   Shutter mode is ' + TFmt.Bold + shutter_mode + TFmt.Clear)
    print('   Pre-amp gain is ' + CameraGain.label(data['gain_index']) + ' (' + \
        TFmt.Bold + '{} e/ADU'.format(data['gain_factor']) + TFmt.Clear + ')')
    print('   Readout speed is ' + TFmt.Bold + '{:.2f} MHz'.format(
        data['horizontal_shift_speed_mhz']) + TFmt.Clear)
    print('   Readout window is {4}({0}, {1}, {2}, {3}) px{5}'.format(
        data['geometry_x'], data['geometry_y'], data['geometry_width'], data['geometry_height'],
        TFmt.Bold, TFmt.Clear))
    print('   Readout binning is {2}{0} x {1} px{3}'.format(
        data['geometry_bin_x'], data['geometry_bin_y'], TFmt.Bold, TFmt.Clear))

    exposure_label = TFmt.Bold + '{:.2f} s'.format(data['exposure_time']) + TFmt.Clear
    if data['state'] == CameraStatus.Waiting:
        exposure_label += ' (with ' + TFmt.Bold + '{:.2f} s'.format(data['delay_time']) + TFmt.Clear
        exposure_label += ' delay)'

    print('   Exposure time is ' + exposure_label)
    return 0


def set_temperature(config, camera_ids, args):
    """Set the camera temperature"""
    if len(args) == 1:
        if args[0] == 'warm':
            temp = None
        else:
            temp = int(args[0])
        with config.daemon.connect() as camd:
            return camd.set_target_temperature(temp)
    print('usage: {} [{}] temperature <degrees>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_exposure(config, camera_ids, args):
    """Set the camera exposure time"""
    if len(args) == 1:
        exposure = float(args[0])
        with config.daemon.connect() as camd:
            return camd.set_exposure(exposure)
    print('usage: {} [{}] exposure <seconds>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_exposure_delay(config, camera_ids, args):
    """Set the camera pre-exposure delay"""
    if len(args) == 1:
        delay = float(args[0])
        with config.daemon.connect() as camd:
            return camd.set_exposure_delay(delay)
    print('usage: {} [{}] delay <seconds>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_gain(config, camera_ids, args):
    """Set the camera gain"""
    if len(args) == 1 and (args[0] == 'high' or args[0] == 'medium' or args[0] == 'low'):
        index = 0 if args[0] == 'high' else 1 if args[0] == 'medium' else 2
        with config.daemon.connect() as camd:
            return camd.set_gain(index)
    print('usage: {} [{}] gain [high|medium|low]'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_horizontal_shift_speed(config, camera_ids, args):
    """Set the readout / horizontal shift speed"""
    options = ['a', 'b', 'c', 'd']
    if len(args) == 1 and args[0] in options:
        index = options.index(args[0])
        with config.daemon.connect() as camd:
            return camd.set_horizontal_shift(index)
    print('usage: {} [blue|red] readout [a|b|c|d]'.format(SCRIPT_NAME))
    print('usage: {} [{}] readout [a|b|c|d]'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_shutter(config, camera_ids, args):
    """Set the camera shutter mode"""
    if len(args) == 1 and (args[0] == 'auto' or args[0] == 'dark'):
        enabled = args[0] == 'auto'
        with config.daemon.connect() as camd:
            return camd.set_shutter(enabled)
    print('usage: {} [{}] shutter [auto|dark]'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_binning(config, camera_ids, args):
    """Set the camera binning"""
    if len(args) == 1:
        # Assume square pixels
        binning = int(args[0])
        with config.daemon.connect() as camd:
            return camd.set_binning(binning, binning)
    print('usage: {} [{}] bin <pixel size>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_window(config, camera_ids, args):
    """Set the camera readout window"""
    if len(args) == 4:
        x = int(args[0])
        y = int(args[1])
        width = int(args[2])
        height = int(args[3])
        with config.daemon.connect() as camd:
            return camd.set_window(x, y, width, height)
    print('usage: {} [{}] window <x> <y> <width> <height>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def start(config, camera_ids, args):
    """Starts an exposure sequence"""
    if len(args) == 1:
        try:
            count = 0 if args[0] == 'continuous' else int(args[0])
            if args[0] == 'continuous' or count > 0:
                with config.daemon.connect() as camd:
                    return camd.start_sequence(count)
        except Exception:
            print('error: invalid exposure count:', args[0])
            return -1
    print('usage: {} [{}] start (continuous|<count>)'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def stop(config, *_):
    """Stops any active camera exposures"""
    with config.daemon.connect() as camd:
        return camd.stop_sequence()


def initialize(config, *_):
    """Enables the camera driver"""
    # Initialization can take more than 5 sec, so bump timeout to 20 seconds.
    with config.daemon.connect(20) as camd:
        return camd.initialize()


def shutdown(config, *_):
    """Disables the camera drivers"""
    with config.daemon.connect() as camd:
        return camd.shutdown()


def print_usage(config_paths):
    """Prints the utility help"""
    print('usage: {} [{}] <command> [<args>]'.format(SCRIPT_NAME, '|'.join(sorted(config_paths.keys()))))
    print()
    print('general commands:')
    print('   status       print a human-readable summary of the camera status')
    print('   exposure     set exposure time in seconds')
    print('   delay        set pre-exposure delay in seconds')
    print('   shutter      set shutter mode')
    print('   gain         set gain mode')
    print('   readout      set readout speed')
    print('   bin          set readout binning')
    print('   window       set readout window')
    print('   start        start an exposure sequence')
    print()
    print('engineering commands:')
    print('   init         initialize the camera driver')
    print('   temperature  set target temperature and enable cooling')
    print('   kill         disconnect from camera driver')
    print()

    return 0


if __name__ == '__main__':
    if 'CAMD_CONFIG_ROOT' in os.environ:
        config_root = os.environ['CAMD_CONFIG_ROOT']
    else:
        config_root = '/etc/camd'

    configs = {os.path.basename(p)[:-5]: p for p in glob.glob(os.path.join(config_root, '*.json'))}
    if not configs:
        print('error: no camera configs were found in ' + config_root)
        print('       run as CAMD_CONFIG_ROOT=/path/to/config/root ' + ' '.join(sys.argv))
        print('       to specify the configuration root directory')
        sys.exit(1)

    if len(sys.argv) == 2 and sys.argv[1] == 'list-cameras':
        print(' '.join(sorted(configs.keys())))
        sys.exit(0)

    if len(sys.argv) < 3:
        sys.exit(print_usage(configs))

    commands = {
        'status': status,
        'temperature': set_temperature,
        'exposure': set_exposure,
        'delay': set_exposure_delay,
        'gain': set_gain,
        'readout': set_horizontal_shift_speed,
        'shutter': set_shutter,
        'bin': set_binning,
        'window': set_window,
        'start': start,
        'stop': stop,
        'init': initialize,
        'kill': shutdown
    }

    if sys.argv[1] not in configs or sys.argv[2] not in commands:
        sys.exit(print_usage(configs))

    sys.exit(run_command(configs, sys.argv[1], commands[sys.argv[2]], sys.argv[3:]))
